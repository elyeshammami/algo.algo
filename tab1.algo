PROCEDURE dot_product(v1,v2 : ARRAY_OF FLOAT,ps:FLOAT)
VAR
i :INTEGER;
BEGIN
FOR i FROM 0 TO v1.length-1 STEP 1  DO
ps:=ps+ (v1[i]*v2[i]);
END_FOR
END
PROCEDURE read_vector(VAR tab: ARRAY_OF FLOAT,n:INTEGER)
VAR
i:INTEGER;
BEGIN
FOR i FROM 0 TO n-1 DO 
REPEAT
write("give the digits");
read(tab[i]);
UNTIL (tab[i]>0)
END_FOR
END
FUNCTION dot_product_func(v1,v2:ARRAY_OF FLOAT,n:INTEGER) : FLOAT;
VAR
ps: FLOAT;
i : INTEGER;
BEGIN
FOR i FROM 0 TO v1.length-1 STEP 1  DO
ps:=ps+ (v1[i]*v2[i]);
END_FOR
RETURN ps ;
END
ALGORITHM Dot_product
VAR
v1,v2: ARRAY_OF FLOAT[n];
n:INTEGER;
ps:FLOAT:=0;
BEGIN
REPEAT
write("give n");
read(n);
UNTIL (n>0)
read_vector(v1,n);
read_vector(v2,n);
dot_product(v1,v2,ps);
IF (ps=0) THEN
write("the vectors are orthogonal")
ELSE 
write("the vectors are not orthogonal")
END_IF
END
